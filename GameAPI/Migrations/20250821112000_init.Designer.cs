// <auto-generated />
using System;
using GameAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameAPI.Migrations
{
    [DbContext(typeof(GameApiContext))]
    [Migration("20250821112000_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameAPI.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("GameCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("GameCompanyId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GameCompanyId = 1,
                            PublisherId = 1,
                            Title = "The Last of Us Part II",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GameCompanyId = 2,
                            PublisherId = 2,
                            Title = "Cyberpunk 2077",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 3,
                            GameCompanyId = 3,
                            PublisherId = 2,
                            Title = "GTA V",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 4,
                            GameCompanyId = 4,
                            PublisherId = 4,
                            Title = "Assassin’s Creed Valhalla",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 5,
                            GameCompanyId = 5,
                            PublisherId = 3,
                            Title = "Halo Infinite",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 6,
                            GameCompanyId = 1,
                            PublisherId = 1,
                            Title = "Uncharted 4",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 7,
                            GameCompanyId = 2,
                            PublisherId = 2,
                            Title = "The Witcher 3: Wild Hunt",
                            UserId = 2
                        },
                        new
                        {
                            GameId = 8,
                            GameCompanyId = 4,
                            PublisherId = 4,
                            Title = "Far Cry 6",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GameAPI.Models.GameCompany", b =>
                {
                    b.Property<int>("GameCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameCompanyId"));

                    b.Property<int>("FoundedYear")
                        .HasColumnType("int");

                    b.Property<string>("HeadQuarter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GameCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("GameCompanies");

                    b.HasData(
                        new
                        {
                            GameCompanyId = 1,
                            FoundedYear = 1984,
                            HeadQuarter = "California, USA",
                            Name = "Naughty Dog",
                            UserId = 2
                        },
                        new
                        {
                            GameCompanyId = 2,
                            FoundedYear = 1994,
                            HeadQuarter = "Warsaw, Poland",
                            Name = "CD Projekt Red",
                            UserId = 2
                        },
                        new
                        {
                            GameCompanyId = 3,
                            FoundedYear = 1998,
                            HeadQuarter = "New York, USA",
                            Name = "Rockstar Games",
                            UserId = 2
                        },
                        new
                        {
                            GameCompanyId = 4,
                            FoundedYear = 1986,
                            HeadQuarter = "Montreuil, France",
                            Name = "Ubisoft",
                            UserId = 2
                        },
                        new
                        {
                            GameCompanyId = 5,
                            FoundedYear = 2007,
                            HeadQuarter = "Washington, USA",
                            Name = "343 Industries",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GameAPI.Models.GameDetail", b =>
                {
                    b.Property<int>("GameDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GameDetailId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("GameDetails");

                    b.HasData(
                        new
                        {
                            GameDetailId = 1,
                            Description = "Survival story set in a post-apocalyptic world.",
                            GameId = 1,
                            Genre = "Action-Adventure",
                            ReleaseDate = new DateTime(2020, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 2,
                            Description = "Futuristic open-world RPG set in Night City.",
                            GameId = 2,
                            Genre = "RPG",
                            ReleaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 3,
                            Description = "Open-world action crime game.",
                            GameId = 3,
                            Genre = "Action-Adventure",
                            ReleaseDate = new DateTime(2013, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 4,
                            Description = "Viking-era open-world RPG.",
                            GameId = 4,
                            Genre = "Action-RPG",
                            ReleaseDate = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 5,
                            Description = "Master Chief returns to battle the Banished.",
                            GameId = 5,
                            Genre = "FPS",
                            ReleaseDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 6,
                            Description = "Nathan Drake’s final treasure-hunting adventure.",
                            GameId = 6,
                            Genre = "Adventure",
                            ReleaseDate = new DateTime(2016, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 7,
                            Description = "Monster-hunting in a rich fantasy open world.",
                            GameId = 7,
                            Genre = "RPG",
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            GameDetailId = 8,
                            Description = "Cuba-inspired open-world revolution story.",
                            GameId = 8,
                            Genre = "Shooter",
                            ReleaseDate = new DateTime(2021, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GameAPI.Models.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            Name = "PlayStation 5",
                            Type = "Console",
                            UserId = 1
                        },
                        new
                        {
                            PlatformId = 2,
                            Name = "Xbox Series X",
                            Type = "Console",
                            UserId = 1
                        },
                        new
                        {
                            PlatformId = 3,
                            Name = "PC",
                            Type = "Desktop",
                            UserId = 1
                        },
                        new
                        {
                            PlatformId = 4,
                            Name = "Nintendo Switch",
                            Type = "Console",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GameAPI.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PublisherId");

                    b.HasIndex("UserId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Country = "Japan",
                            Name = "Sony Interactive Entertainment",
                            UserId = 2
                        },
                        new
                        {
                            PublisherId = 2,
                            Country = "USA",
                            Name = "Warner Bros. Games",
                            UserId = 2
                        },
                        new
                        {
                            PublisherId = 3,
                            Country = "USA",
                            Name = "Microsoft Studios",
                            UserId = 2
                        },
                        new
                        {
                            PublisherId = 4,
                            Country = "France",
                            Name = "Ubisoft Entertainment",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GameAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@gameapi.com",
                            Password = "admin123",
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "company@gameapi.com",
                            Password = "company123",
                            Role = "Company",
                            UserName = "companyuser"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "viewer@gameapi.com",
                            Password = "viewer123",
                            Role = "Viewer",
                            UserName = "vieweruser"
                        });
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsPlatformId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "PlatformsPlatformId");

                    b.HasIndex("PlatformsPlatformId");

                    b.ToTable("GamePlatforms", (string)null);
                });

            modelBuilder.Entity("GameAPI.Models.Game", b =>
                {
                    b.HasOne("GameAPI.Models.GameCompany", "GameCompany")
                        .WithMany("Games")
                        .HasForeignKey("GameCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAPI.Models.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameAPI.Models.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameCompany");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameAPI.Models.GameCompany", b =>
                {
                    b.HasOne("GameAPI.Models.User", "User")
                        .WithMany("GameCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameAPI.Models.GameDetail", b =>
                {
                    b.HasOne("GameAPI.Models.Game", "Game")
                        .WithOne("GameDetail")
                        .HasForeignKey("GameAPI.Models.GameDetail", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAPI.Models.User", "User")
                        .WithMany("GameDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameAPI.Models.Platform", b =>
                {
                    b.HasOne("GameAPI.Models.User", "User")
                        .WithMany("Platforms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameAPI.Models.Publisher", b =>
                {
                    b.HasOne("GameAPI.Models.User", "User")
                        .WithMany("Publishers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("GameAPI.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameAPI.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameAPI.Models.Game", b =>
                {
                    b.Navigation("GameDetail");
                });

            modelBuilder.Entity("GameAPI.Models.GameCompany", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameAPI.Models.Publisher", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameAPI.Models.User", b =>
                {
                    b.Navigation("GameCompanies");

                    b.Navigation("GameDetails");

                    b.Navigation("Games");

                    b.Navigation("Platforms");

                    b.Navigation("Publishers");
                });
#pragma warning restore 612, 618
        }
    }
}
